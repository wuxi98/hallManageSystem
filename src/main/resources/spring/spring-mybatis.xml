<?xml version="1.0" encoding="UTF-8"?>
<beans  xmlns="http://www.springframework.org/schema/beans"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:aop="http://www.springframework.org/schema/aop"
        xmlns:cache="http://www.springframework.org/schema/cache"
        xmlns:c="http://www.springframework.org/schema/c"
        xmlns:tx="http://www.springframework.org/schema/tx"
        xmlns:jee="http://www.springframework.org/schema/jee"
        xmlns:p="http://www.springframework.org/schema/p"
        xmlns:jdbc="http://www.springframework.org/schema/jdbc"
        xmlns:task="http://www.springframework.org/schema/task"
        xmlns:lang="http://www.springframework.org/schema/lang"
        xmlns:mvc="http://www.springframework.org/schema/mvc"
        xmlns:util="http://www.springframework.org/schema/util"
        xsi:schemaLocation="http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
        http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-3.1.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
        http://www.springframework.org/schema/p http://www.springframework.org/schema/p/spring-p.xsd">

    <!--这个xml  对应的是  mapper 级别的配置 -->

    <!-- 开启包扫描  扫描com.nchu.mapper这个包  所有的mapper接口类都放在这个包下-->
    <!-- 启动注解
            排除了Controller注解
     -->
    <context:component-scan base-package="com.nchu.mapper">
        <!--<context:exclude-filter type="annotation"
                                expression="org.springframework.stereotype.Controller"/>-->
    </context:component-scan>

    <!-- 引入数据库相关信息的配置文件-->
    <context:property-placeholder location="classpath:db.properties"/>

    <!-- 配置druid数据源(从配置文件中获取数据) -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="user" value="root"/>
        <property name="password" value=""/>
        <property name="driverClass" value="com.mysql.jdbc.Driver"/>
        <property name="jdbcUrl" value="jdbc:mysql://127.0.0.1:3306/hall_system"/>

        <!--如果有需要，就把所有的属性全部写到properties文件里面去-->
        <!-- c3p0连接池的私有属性-->
        <property name="maxPoolSize" value="30"/>
        <property name="minPoolSize" value="10"/>
        <!--关闭连接后不自动commit-->
        <property name="autoCommitOnClose" value="false"/>
        <!-- 获取连接超时时间-->
        <property name="checkoutTimeout" value="10000"/>
        <!--获取连接失败重连次数-->
        <property name="acquireRetryAttempts" value="20"/>
    </bean>


    <!--
        关键一步：整合mybatis
    -->
    <!--
        第一步：注入一股mybatis的sqlsessionFactory【关键步骤】
        第二步：声明式的事务管理
    -->
    <!-- 配置mybatis的sqlSessionFactory -->
    <bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!--引入mappers文件-->
        <!--
            <property name="configLocation" value="classpath:mybatis-config.xml"/>
            这是引入  mybatis-config.xml配置文件
            下面是另一种方式
         -->
        <!-- 这要求所有的mapper文件必须在 com/nchu/mapper 之下-->
        <property name="mapperLocations" value="classpath:com/nchu/mapper/**/*.xml"/>

        <property name="configuration">
            <bean class="org.apache.ibatis.session.Configuration">
                <!--这里相当于 mybatis-cfg.xml  里的 setting -->
                <!--
                    可以加入驼峰命名，
                    其他mybatis的配置 也就是mybatis.cfg.xml的相关配置都会转移到这里来
                -->
                <property name="mapUnderscoreToCamelCase" value="true"/>
            </bean>
        </property>

        <!--&lt;!&ndash; 自动扫描mapper.xml文件&ndash;&gt;-->
        <!--<property name="mapperLocations" value="classpath:mapper/*.xml"/>-->
        <!--&lt;!&ndash; 载入mybatis全局配置文件&ndash;&gt;-->
        <!--<property name="configLocation" value="classpath:mybatis-conf.xml"/>-->

        <!-- 插件配置-->
        <property name="plugins">
            <array>
                <!--分页插件配置 就不需要再写limit  会通过拦截器实现分页-->
                <bean class="com.github.pagehelper.PageInterceptor">
                    <property name="properties">
                        <value>
                            helperDialect=mysql
                            reasonable=true
                            supportMethodsArguments=true
                            params=count=countSql
                            autoRuntimeDialect=true
                        </value>
                    </property>
                </bean>
            </array>
        </property>
    </bean>



    <!-- 持久层接口层-->
    <!-- 配置mybatis dao接口扫描-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--规范  这个basePackage 会扫描 com.nchu.mapper 这个包-->
        <property name="basePackage" value="com.nchu.mapper"/>
        <!--这里的 value（sqlSessionFactoryBean） 引用 id="sqlSessionFactoryBean" 的bean-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryBean"/>
    </bean>

    <!--数据管理  使用数据源进行事务管理-->
    <!-- 配置spring的声明式事务，名字为默认值 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--注入数据源-->
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- 确定事务管理策略  transaction-manager：指向上面的transactionManager-->
    <tx:advice transaction-manager = "transactionManager"    id="transactionAdvice">
        <!--事务处理的相关值以及它的传播性-->
        <tx:attributes>
            <!--查询相关配置为只读  select get 或者 query开头-->
            <tx:method name="select*" read-only="true"/>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="query*" read-only="true"/>
            <tx:method name="query*" propagation="REQUIRED"
                       rollback-for="Exception"/>
            <tx:method name="delete*" propagation="REQUIRED"
                       rollback-for="Exception"/>
            <tx:method name="add*" propagation="REQUIRED"
                       rollback-for="Exception"/>
            <tx:method name="insert*" propagation="REQUIRED"
                       rollback-for="Exception"/>
        </tx:attributes>
    </tx:advice>

    <!-- 使用aop对事务管理的范围进行织入
        明确几个点：1 对哪些地方需要进行事务的管理 execution书写，明确边界
                    2 使用什么策略去管理策略  这里使用tx:advice全部写于其中
                        在我们的aop的advice中只需要去引用这个事务管理建议即可-->
    <aop:config>
        <aop:pointcut id="txCut" expression="execution(* com.nchu.service..*.*(..))"/>
        <aop:advisor advice-ref="transactionAdvice" pointcut-ref="txCut"/>
    </aop:config>

    <!-- 开启事务控制的注解支持 -->
    <!-- 采用注解进行事务配置，要在Service的实现类上面加@Transaction注解-->
    <tx:annotation-driven transaction-manager="transactionManager"/>
</beans>
